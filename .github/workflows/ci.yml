name: Check GPG Key Expiry

on:
  push:
  schedule:
    - cron: 0 0 1 * *

jobs:
  check-expiration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install gnupg
        run: |
          sudo apt-get install gnupg -y
          sudo snap install yq
          #wget https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64.tar.gz -O - |\
          #  tar xz && sudo mv yq_linux_amd64 /usr/bin/yq

      - name: Read GPG keys from file
        id: read-keys
        run: |
          fingerprints=($(yq eval '.keys.fingerprints[]' gpg_keys.yaml))
          urls=($(yq eval '.keys.urls[]' gpg_keys.yaml))
          echo "::set-output name=fingerprints::${fingerprints[*]}"
          echo "::set-output name=urls::${urls[*]}"          

      - name: Download and Import GPG keys from URLs
        run: |
          for url in ${{ steps.read-keys.outputs.urls }}; do
            filename=$(basename "$url")
            curl -sSOL "$url"
            gpg --import "$filename"
          done

      - name: Import GPG keys from fingerprints
        run: |
          for fingerprint in ${{ steps.read-keys.outputs.fingerprints }}; do
            gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$fingerprint"
          done

      - name: Check key expiration
        id: check-expiration
        run: |
          set -x
          period_of_time_to_check=$(date -d "+5 years" +%s)
          public_keys=$(gpg --list-public-keys --with-colons | grep "^pub" | cut -d: -f5)

          for key in ${public_keys}; do
              key_info=$(gpg --list-public-keys "${key}")
              expiration_dates=$(grep -oP '(?<=\[expires: )\d{4}-\d{2}-\d{2}(?=\])' <<< "${key_info}") || true
              expiring_keys=""
              for expiration_date in $expiration_dates; do
              # Check if the line contains a key ID
                  # Convert the expiration date to a timestamp
                  expiration_timestamp=$(date -d "$expiration_date" +%s)
                  echo "Checking $key, the expiration date ${expiration_date} was found"
                  # Calculate the difference in seconds between expiration date and two months from now
                  difference=$((expiration_timestamp - period_of_time_to_check))
                  # If the difference is less than or equal to zero, the key is expiring within two months
                  if [ "$difference" -le 0 ]; then
                      expiring_keys="${expiring_keys}${key} "
                  fi
              done
          done
          echo "::set-output name=expiring_keys::$expiring_keys"

      - name: Create issue if keys are expiring
        if: ${{ steps.check-expiration.outputs.expiring_keys }}
        run: |
          echo "The following GPG keys are expiring soon:"
          echo "$expiring_keys"
          echo "Creating issue..."
          echo "## GPG Key Expiry Warning" > issue.md
          echo "The following GPG keys are expiring in the future as defined:" >> issue.md
          for key in ${expiring_keys}; do
             echo "Key expiring within two months: ${key}" >> issue.md
             gpg --list-public-keys "${key}"
             echo "\n"
          done
          gh issue create --title "GPG Key Expiry Warning" --body "$(cat issue.md)"
        env:
          GH_TOKEN: ${{ github.token }}

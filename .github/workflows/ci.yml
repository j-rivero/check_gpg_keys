name: Check GPG Key Expiry

on:
  push:
  schedule:
    - cron: 0 0 1 * *

jobs:
  check-expiration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install gnupg
        run: sudo apt-get install gnupg -y

      - name: Read GPG key URLs from file
        id: read-urls
        run: |
          mapfile -t urls < gpg_key_urls.txt
          echo "::set-output name=urls::${urls[*]}"

      - name: Download GPG keys
        run: |
          for url in ${{ steps.read-urls.outputs.urls }}; do
            filename=$(basename "$url")
            curl -sSOL "$url"
          done

      - name: Import GPG keys
        run: |
          for key in *; do
            if file "$key" | grep -q "PGP public key block"; then
              gpg --import "$key"
            else
              gpg --dearmor "$key" && gpg --import "${key}.gpg"
            fi
          done

      - name: Check key expiration
        id: check-expiration
        run: |
          period_of_time_to_check=$(date -d "+2 months" +%s)

          for key in $(gpg --list-public-keys --with-colons | grep "^pub" | cut -d: -f5); do
              expiration_dates=$(grep -oP '(?<=\[expires: )\d{4}-\d{2}-\d{2}(?=\])' <<< "`gpg --list-public-keys "${key}"`")
              expiring_keys=""
              for expiration_date in $expiration_dates; do
              # Check if the line contains a key ID
                  # Convert the expiration date to a timestamp
                  expiration_timestamp=$(date -d "$expiration_date" +%s)
                  echo "Checking $key, the expiration date ${expiration_date} was found"

                  # Calculate the difference in seconds between expiration date and two months from now
                  difference=$((expiration_timestamp - period_of_time_to_check))

                  # If the difference is less than or equal to zero, the key is expiring within two months
                  if [ "$difference" -le 0 ]; then
                      expiring_keys="${expiring_keys}${key} "
                  fi
              done
          echo "::set-output name=expiring_keys::$expiring_keys"

      - name: Create issue if keys are expiring
        if: ${{ steps.check-expiration.outputs.expiring_keys == "" }}
        run: |
          expiring_keys=$(gpg --list-keys --with-colons | grep "^pub" | cut -d: -f6 | xargs -I{} sh -c "echo {} && gpg --check-expire {}" | grep "Key expires" | awk '$4 <= 60')
          echo "The following GPG keys are expiring soon:"
          echo "$expiring_keys"
          echo "Creating issue..."
          echo "## GPG Key Expiry Warning" > issue.md
          echo "The following GPG keys are expiring in the future as defined:" >> issue.md
          for key in ${expiring_keys}; do
             echo "Key expiring within two months: ${key}" >> issue.md
             gpg --list-public-keys "${key}"
             echo "\n"
          done
          gh issue create --title "GPG Key Expiry Warning" --body "$(cat issue.md)"
